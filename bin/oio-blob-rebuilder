#!/usr/bin/env python

import argparse

from oio.blob.rebuilder import BlobRebuilderWorker
from oio.common.utils import get_logger


def make_arg_parser():
    log_parser = argparse.ArgumentParser(add_help=False)
    levels = ['DEBUG', 'INFO', 'WARN', 'ERROR']
    log_parser.add_argument('--log-level', choices=levels,
                            help="Log level")
    log_parser.add_argument('--log-syslog-prefix',
                            help="Syslog prefix")
    log_parser.add_argument('--log-facility',
                            help="Log facility")
    log_parser.add_argument('--log-address',
                            help="Log address")

    descr = "Rebuild chunks that were on the specified volume. " \
            "If no input file is provided, the list of chunks " \
            "is obtained by requesting the associated rdir service. " \
            "In that case, it is necessary to declare an incident " \
            "(with 'openio volume admin incident') before " \
            "running this tool."
    parser = argparse.ArgumentParser(description=descr, parents=[log_parser])
    parser.add_argument('namespace', help="Namespace")
    parser.add_argument('--volume', help="Id of the volume to rebuild (IP:PORT)")
    parser.add_argument('--dry-run', action='store_true',
                        help="Display actions but do nothing")
    parser.add_argument('--rdir-fetch-limit', type=int,
                        help="Maximum of entries returned in "
                             "each rdir response (100)")
    parser.add_argument('--report-interval', type=int,
                        help="Report interval in seconds (3600)")
    parser.add_argument('--bytes-per-second', type=int,
                        help="Max bytes per second (10000000)")
    parser.add_argument('--chunks-per-second', type=int,
                        help="Max chunks per second (30)")
    parser.add_argument('-q', '--quiet', action='store_true',
                        help="Don't print log on console")
    parser.add_argument('--allow-same-rawx', action='store_true',
                        help="Allow rebuilding a chunk on the original rawx")
    dft_help = "Try to delete faulty chunks after they have been rebuilt " \
               "elsewhere. This option is useful if the chunks you are " \
               "rebuilding are not actually missing but are corrupted."
    parser.add_argument('--delete-faulty-chunks', action='store_true',
                        help=dft_help)
    ifile_help = "Read chunks from this file instead of rdir. " \
                 "Each line should be formatted like " \
                 "'container_id|content_id|short_chunk_id'."
    parser.add_argument('--input-file', nargs='?',
                        help=ifile_help)
    parser.add_argument('--beanstalkd',
                        help='address of the service beanstalkd')
    parser.add_argument('--beanstalkd-tube',
                        help='the tube to use for the beanstalkd service')

    return parser


if __name__ == '__main__':
    args = make_arg_parser().parse_args()

    conf = {}
    if args.beanstalkd_tube is not None:
        conf['beanstalkd_tube'] = args.beanstalkd_tube
    if args.log_level is not None:
        conf['log_level'] = args.log_level
    if args.log_facility is not None:
        conf['log_facility'] = args.log_facility
    if args.log_address is not None:
        conf['log_address'] = args.log_address
    conf['dry_run'] = args.dry_run
    if args.rdir_fetch_limit is not None:
        conf['rdir_fetch_limit'] = args.rdir_fetch_limit
    if args.report_interval is not None:
        conf['report_interval'] = args.report_interval
    if args.bytes_per_second is not None:
        conf['bytes_per_second'] = args.bytes_per_second
    if args.chunks_per_second is not None:
        conf['chunks_per_second'] = args.chunks_per_second
    conf['namespace'] = args.namespace
    conf['allow_same_rawx'] = args.allow_same_rawx
    if args.log_syslog_prefix is not None:
        conf['syslog_prefix'] = args.log_syslog_prefix
    else:
        conf['syslog_prefix'] = 'OIO,%s,blob-rebuilder,%s' % \
            (args.namespace, args.volume)

    logger = get_logger(conf, None, not args.quiet)

    try:
        worker = BlobRebuilderWorker(
            conf, logger, args.volume, input_file=args.input_file,
            try_chunk_delete=args.delete_faulty_chunks,
            beanstalkd_addr=args.beanstalkd)
        if args.volume:
            worker.rebuilder_pass_with_lock()
        else:
            worker.rebuilder_pass()
    except Exception as e:
        logger.exception('ERROR in rebuilder: %s' % e)
