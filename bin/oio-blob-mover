#!/usr/bin/env python

# oio-blob-mover.py
# Copyright (C) 2019 OpenIO SAS, as part of OpenIO SDS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse

from oio.cli import make_logger_args_parser, get_logger_from_args
from oio.xcute.blob_mover import BlobMoverDispatcher


def make_arg_parser():
    log_parser = make_logger_args_parser()
    descr = """
    Xcute blob mover
    """
    parser = argparse.ArgumentParser(description=descr, parents=[log_parser])

    parser.add_argument('namespace', help="Namespace")
    parser.add_argument(
        'service_id',
        help='ID of the service to work on.')
    parser.add_argument(
        '--items-per-second', type=int,
        help='Max items per second. '
             '(default=%d)' % BlobMoverDispatcher.DEFAULT_ITEM_PER_SECOND)
    parser.add_argument(
        '--rdir-fetch-limit', type=int,
        help='Maximum number of entries returned in each rdir response. '
             '(default=%d)' % BlobMoverDispatcher.DEFAULT_RDIR_FETCH_LIMIT)
    parser.add_argument(
        '--rdir-timeout', type=float,
        help='Timeout for rdir operations, in seconds. '
             '(default=%f).' % BlobMoverDispatcher.DEFAULT_RDIR_TIMEOUT)
    parser.add_argument(
        '--min-chunk-size', type=int,
        help='Only move chunks larger than the given size.')
    parser.add_argument(
        '--max-chunk-size', type=int,
        help='Only move chunks smaller than the given size.')
    parser.add_argument(
        '--excluded-rawx',
        help="List of rawx not to use to move the chunks.")

    return parser


if __name__ == '__main__':
    args = make_arg_parser().parse_args()
    logger = get_logger_from_args(args)

    conf = dict()
    # common
    conf['namespace'] = args.namespace
    conf['items_per_second'] = args.items_per_second
    # blob mover
    conf['service_id'] = args.service_id
    conf['rdir_fetch_limit'] = args.rdir_fetch_limit
    conf['rdir_timeout'] = args.rdir_timeout
    conf['min_chunk_size'] = args.min_chunk_size
    conf['max_chunk_size'] = args.max_chunk_size
    conf['excluded_rawx'] = args.excluded_rawx

    BlobMoverDispatcher(conf, logger=logger).run()
