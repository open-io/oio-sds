#!/usr/bin/env python

import argparse
import logging

from random import choice, shuffle
from oio import xcute
from oio.common.redis_conn import RedisConn
from oio.rdir.client import RdirClient


class Executor(object):
    def __call__(self, item):
        limit, marker = item
        rdir = RdirClient({'namespace': self.ns})


class Generator(object):
    def __init__(self, ns_name, srv_id):
        self.ns_name = ns_name
        self.srv_id = srv_id
        self.limit = 1000

    def __call__(self):
        rdir = RdirClient({'namespace': self.ns})
        last = None
        while True:
            chunks = rdir.chunk_fetch(self.srvid, limit=self.limit,
                                      start_after=last)
            chunks = list(chunks)
            if not chunks:
                return
            yield (self.limit, last)
            last = chunks[-1]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Distributed blob mover")
    parser.add_argument('--namespace', '--ns',
                        type=str,
                        help="Namespace")
    parser.add_argument('--volume', '--vol',
                        type=str,
                        help="Volume to move")
    parser.add_argument('--job',
                        type=str, default=None,
                        help="Unique ID of the job")
    parser.add_argument('action',
                        type=str, default='status',
                        choices=('status', 'start','pause','resume', 'join'),
                        help='Action to be performed on the specified job')
    args = parser.parse_args()

    redis_conf = {"redis_host": "127.0.0.1", "redis_port": 6379}
    redis = RedisConn(redis_conf)

    beanstalk = xcute.BeanstalkdSink(args.namespace)

    if args.action == 'start':
        assert(args.job is None)
        batch = xcute.Batch(args.namespace, redis, beanstalk)
        batch_id = batch.start(generator, Executor)
        logging.info("started %s", batch_id)
    else:
        assert(args.job is not None)
        batch = xcute.Batch(args.namespace, redis, batch_id=args.job)
        if args.action == 'status':
            rc = batch.status()
            print("status [%s] : %s", args.job, repr(rc))
        elif args.action == 'pause':
            rc = batch.pause()
            logging.info("pause [%s] : %s", args.job, repr(rc))
        elif args.action == 'resume':
            rc = batch.resume()
            logging.info("resume [%s] : %s", args.job, repr(rc))
        elif args.action == 'join':
            rc = batch.join()
            logging.info("join [%s] : %s", args.job, repr(rc))
        else:
            logging.error("Unexpected action %s", args.action)

