#!/usr/bin/env python

# oio-blob-improver.py
# Copyright (C) 2018 OpenIO SAS, as part of OpenIO SDS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from oio.cli import make_logger_args_parser, get_logger_from_args
from oio.rebuilder.blob_improver import DEFAULT_IMPROVER_TUBE, \
    BlobImprover


def make_arg_parser():
    log_parser = make_logger_args_parser()
    descr = """Listen to perfectible chunk events,
               and try to place them more adequately."""
    parser = argparse.ArgumentParser(description=descr, parents=[log_parser])
    parser.add_argument('namespace', help="Namespace")
    parser.add_argument('--dry-run', action='store_true',
                        help="Display actions but do nothing")
    parser.add_argument('--report-interval', type=int,
                        help="Report interval in seconds (3600)")
    parser.add_argument('--workers', type=int,
                        help="Number of workers (1)")
    parser.add_argument('--chunks-per-second', type=int,
                        help="Max chunks per second per worker (30)")
    parser.add_argument('--beanstalkd',
                        metavar='IP:PORT',
                        help="Address of the beanstalkd service to listen to")
    parser.add_argument(
        '--beanstalkd-tube', metavar='LISTENER_TUBE',
        help='Listen to this beanstalkd tube (default: "%s").'
             % DEFAULT_IMPROVER_TUBE)
    return parser


def main():
    args = make_arg_parser().parse_args()

    if not args.beanstalkd:
        raise ValueError('Missing beanstalkd address')

    conf = {}
    conf['dry_run'] = args.dry_run
    conf['namespace'] = args.namespace
    tube = args.beanstalkd_tube or DEFAULT_IMPROVER_TUBE

    conf['syslog_prefix'] = 'OIO,%s,blob-improver,%s' % (
        args.namespace, 'tube:' + tube)

    logger = get_logger_from_args(args, default_conf=conf)

    if args.beanstalkd_tube is not None:
        conf['beanstalkd_tube'] = args.beanstalkd_tube
    if args.report_interval is not None:
        conf['report_interval'] = args.report_interval
    if args.workers is not None:
        conf['workers'] = args.workers
    if args.chunks_per_second is not None:
        conf['items_per_second'] = args.chunks_per_second

    success = False
    try:
        blob_improver = BlobImprover(
            conf, logger, beanstalkd_addr=args.beanstalkd)
        success = blob_improver.rebuilder_pass(dry_run=args.dry_run)
    except KeyboardInterrupt:
        logger.info('Exiting')
    except Exception as exc:
        logger.exception('ERROR in improver: %s', exc)
    if not success:
        sys.exit(1)


if __name__ == '__main__':
    main()
