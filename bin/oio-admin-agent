#!/usr/bin/env python

# oio-admin-agent.py
# Copyright (C) 2019 OpenIO SAS, as part of OpenIO SDS
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.

import argparse
from oio.cli import make_logger_args_parser, get_logger_from_args
from oio.admin.agent import BaseAdminAgentHandler, OioAdminAgent
from BaseHTTPServer import HTTPServer


def make_arg_parser():
    desc = """
        Stateless daemon providing an HTTP interface to run blob/meta2 movers
    """
    parser = argparse.ArgumentParser(description=desc,
                                     parents=[make_logger_args_parser()])
    parser.add_argument('--namespace', '--ns',
                        metavar='<namespace>',
                        dest='namespace',
                        help="Namespace", required=True)
    parser.add_argument('--loc', '--location',
                        help="Location of the service.",
                        required=True)
    parser.add_argument('--addr',
                        metavar='<addr>',
                        dest='addr',
                        help="IP:PORT to bind to", required=True)
    return parser


def make_handler(args):
    logger = get_logger_from_args(args)

    class OioAdminAgentHandler(BaseAdminAgentHandler):
        agent = OioAdminAgent(args.namespace, args.loc, logger=logger)

    return OioAdminAgentHandler


if __name__ == "__main__":
    ARGS = make_arg_parser().parse_args()
    IP, PORT = ARGS.addr.split(':')
    HTTPD = HTTPServer((IP, int(PORT)), make_handler(ARGS))
    HTTPD.serve_forever()
