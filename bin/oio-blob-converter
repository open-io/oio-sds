#!/usr/bin/env python

# oio-blob-converter.py
# Copyright (C) 2015-2018 OpenIO SAS, as part of OpenIO SDS
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys

from oio.blob.converter import BlobConverter
from oio.common.logger import get_logger


def make_arg_parser():
    log_parser = argparse.ArgumentParser(add_help=False)
    levels = ['DEBUG', 'INFO', 'WARN', 'ERROR']
    log_parser.add_argument('--log-level', choices=levels,
                            help="Log level")
    log_parser.add_argument('--log-syslog-prefix',
                            help="Syslog prefix")
    log_parser.add_argument('--log-facility',
                            help="Log facility")
    log_parser.add_argument('--log-address',
                            help="Log address")

    descr = """
Convert chunks that were on the specified volume. If an input file is provided,
convert only the listed chunks.
"""
    parser = argparse.ArgumentParser(description=descr, parents=[log_parser])
    parser.add_argument('namespace', help="Namespace")
    parser.add_argument('volume', help="Path of the volume to convert")
    parser.add_argument('--report-interval', type=int,
                        help="Report interval in seconds (3600)")
    parser.add_argument('--chunks-per-second', type=int,
                        help="Max chunks per second per worker (30)")
    parser.add_argument('--no-backup', action='store_true',
                        help="Don't save old xattr to a file",
                        default=False)
    parser.add_argument('--backup-dir',
                        help="Directory where save backup"
                             "(tempory directory by default)")

    parser.add_argument('-q', '--quiet', action='store_true',
                        help="Don't print log on console")
    ifile_help = "Read chunks from this file instead of volume. " \
                 "Each line should be formatted like " \
                 "'chunk_id'."
    parser.add_argument('--input-file', nargs='?',
                        help=ifile_help)

    return parser


def main():
    args = make_arg_parser().parse_args()

    conf = {}
    conf['namespace'] = args.namespace
    conf['volume'] = args.volume
    conf['backup'] = not args.no_backup
    conf['backup_dir'] = args.backup_dir

    if args.log_level is not None:
        conf['log_level'] = args.log_level
    if args.log_facility is not None:
        conf['log_facility'] = args.log_facility
    if args.log_address is not None:
        conf['log_address'] = args.log_address
    if args.log_syslog_prefix is not None:
        conf['syslog_prefix'] = args.log_syslog_prefix
    else:
        conf['syslog_prefix'] = 'OIO,%s,blob-converter,%s' % \
            (args.namespace, args.volume)

    logger = get_logger(conf, 'log', not args.quiet)

    if args.report_interval is not None:
        conf['report_interval'] = args.report_interval
    if args.chunks_per_second is not None:
        conf['items_per_second'] = args.chunks_per_second

    success = False
    try:
        blob_converter = BlobConverter(conf, logger)
        success = blob_converter.converter_pass(input_file=args.input_file)
    except KeyboardInterrupt:
        logger.info('Exiting')
    except Exception as exc:
        logger.exception('ERROR in converter: %s', exc)
    if not success:
        sys.exit(1)


if __name__ == '__main__':
    main()
