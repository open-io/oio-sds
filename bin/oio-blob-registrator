#!/usr/bin/env python

import argparse

from oio.blob.registrator import BlobRegistratorWorker
from oio.common.utils import get_logger


def make_arg_parser():
    log_parser = argparse.ArgumentParser(add_help=False)
    levels = ['DEBUG', 'INFO', 'WARN', 'ERROR']
    log_parser.add_argument('--log-level', choices=levels,
                            help="Log level")
    log_parser.add_argument('--log-syslog-prefix',
                            help="Syslog prefix")
    log_parser.add_argument('--log-facility',
                            help="Log facility")
    log_parser.add_argument('--log-address',
                            help="Log address")

    descr = "Especially for my favorite customer! " + \
            "The script runs the chunks on the given rawx volume and " + \
            "it registers them in their container."
    parser = argparse.ArgumentParser(description=descr, parents=[log_parser])
    parser.add_argument('namespace', help="Namespace")
    parser.add_argument('volume', help="The volume id to rebuild")
    parser.add_argument('--first', default=False, action='store_true',
                        help="Also work on a chunk if it is the first in " + \
                             "its metachunk")
    parser.add_argument('--no-lock', action='store_true',
                        help="Also work on a chunk if it is the first in " + \
                             "its metachunk")
    parser.add_argument('--report-interval', type=int,
                        help="Report interval in seconds (3600)")
    parser.add_argument('--chunks-per-second', type=int,
                        help="Max chunks per second (30)")
    parser.add_argument('-q', '--quiet', action='store_true',
                        help="Don't print log on console")

    return parser


if __name__ == '__main__':
    args = make_arg_parser().parse_args()

    conf = {}
    if args.log_level is not None:
        conf['log_level'] = args.log_level
    if args.log_facility is not None:
        conf['log_facility'] = args.log_facility
    if args.log_address is not None:
        conf['log_address'] = args.log_address

    conf['first'] = args.first

    if args.report_interval is not None:
        conf['report_interval'] = args.report_interval
    if args.chunks_per_second is not None:
        conf['chunks_per_second'] = args.chunks_per_second
    conf['namespace'] = args.namespace
    if args.log_syslog_prefix is not None:
        conf['syslog_prefix'] = args.log_syslog_prefix
    else:
        conf['syslog_prefix'] = 'OIO,%s,blob-registrator,%s' % \
            (args.namespace, args.volume)

    logger = get_logger(conf, None, not args.quiet)

    try:
        worker = BlobRegistratorWorker(conf, logger, args.volume)
        if args.no_lock:
            worker.pass_without_lock()
        else:
            worker.pass_with_lock()
    except Exception as e:
        logger.exception('ERROR in registrator: %s' % e)

