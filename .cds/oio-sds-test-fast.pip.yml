version: v1.0
name: oio-sds-test-fast
jobs:
  - job: Run fast tests
    steps:
      - gitClone:
          branch: "{{ .git.branch }}"
          commit: "{{ .git.hash }}"
          depth: "false"
          directory: "{{ .cds.workspace }}"
          privateKey: proj-ssh-openio
          url: "{{ .git.url }}"

      - name: Install dependencies
        script: |+
          #!/bin/bash
          set -x
          . .cds/versions
          export DEBIAN_FRONTEND=noninteractive
          echo "deb [trusted=yes] http://read:{{.cds.proj.private_ovh_objectstorage_openio_read_password}}@last-private-ovh-objectstorage-openio.snap-priv.mirrors.ovh.net/ubuntu focal/main main" > /etc/apt/sources.list.d/snapmirror-ovh-objectstorage-openio.list
          echo "deb [trusted=yes] http://last-public-ovh-pcs.snap.mirrors.ovh.net/ubuntu focal main" > /etc/apt/sources.list.d/snapmirror-ovh-pcs-public.list
          echo "deb [trusted=yes] http://last-public.canonical.ubuntu.archive.snap.mirrors.ovh.net/ubuntu focal main" >> /etc/apt/sources.list.d/snapmirror-focal.list
          echo "deb [trusted=yes] http://last-public.canonical.ubuntu.archive.snap.mirrors.ovh.net/ubuntu focal-updates main" >> /etc/apt/sources.list.d/snapmirror-focal.list
          apt-get update
          apt-get install -y $(tr '\n' ' ' < .cds/deps-ubuntu-focal.txt) ${GO_PACKAGE} ${PYTHON_PACKAGE} ${ZOOKEEPER_PACKAGE}
          # Configure environment
          echo "export PATH=/opt/${GO_PACKAGE}/bin:/usr/lib/rust-${RUST_VERSION}/bin:/opt/${ZOOKEEPER_PACKAGE}/bin:/opt/${PYTHON_PACKAGE}/bin:$PATH" > $HOME/oio-env.sh
          echo "export ZOOBINDIR=/opt/${ZOOKEEPER_PACKAGE}/bin"  >> $HOME/oio-env.sh
          echo "export ZOOLIBDIR=/opt/${ZOOKEEPER_PACKAGE}/lib"  >> $HOME/oio-env.sh
          echo "export ZOOINCDIR=/opt/${ZOOKEEPER_PACKAGE}/include/zookeeper"  >> $HOME/oio-env.sh
          echo 'export CMAKE_OPTS="-DENABLE_CODECOVERAGE=on -DCMAKE_INSTALL_PREFIX=/tmp/oio -DLD_LIBDIR=lib -DZK_LIBDIR=${ZOOLIBDIR} -DZK_INCDIR=${ZOOINCDIR}"' >> $HOME/oio-env.sh
          echo "export LD_LIBRARY_PATH=/opt/${GO_PACKAGE}/lib:/opt/${PYTHON_PACKAGE}/lib:/opt/${ZOOKEEPER_PACKAGE}/lib:/tmp/oio/lib" >> $HOME/oio-env.sh
          # tox does not read the file pip.conf, it uses the environment variable PIP_INDEX_URL
          echo "export PIP_INDEX_URL=https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/" >> $HOME/oio-env.sh
          source $HOME/oio-env.sh
          mkdir /tmp/oio
          /opt/${PYTHON_PACKAGE}/bin/python3 -m venv $HOME/oiovenv
          cat << EOF > $HOME/oiovenv/pip.conf
          [global]
          index-url = https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/
          [install]
          progress-bar = off
          EOF
          . $HOME/oiovenv/bin/activate
          pip install --upgrade pip setuptools tox virtualenv
          # Need pip>21.1 for this to work
          pip install -e ".[all]"
          fdbtag="fdb-${FDB_VERSION}"
          worker cache pull $fdbtag
          dpkg -i fdb-packages/*.deb
          systemctl stop foundationdb.service
          systemctl disable foundationdb.service
          rm -rf fdb-packages

          # Build wrapper for Sonarqube
          (cd /opt && wget --content-disposition https://sonarqube.ovhcloud.tools/static/cpp/build-wrapper-linux-x86.zip)
          (cd /opt && unzip build-wrapper-linux-x86.zip)

      - name: Run fast tests
        script:
          - . $HOME/oio-env.sh
          - pgrep rsyslogd || rsyslogd &
          - . $HOME/oiovenv/bin/activate
          - ./tools/oio-travis-failfast.sh
          - coverage combine .coverage.*.*
          - coverage xml -o .coverage.build.xml
          - mv .coverage .coverage.build
          - rm -f .coverage.*-vm*

      - name: Run unit tests
        script:
          - . $HOME/oio-env.sh
          - . $HOME/oiovenv/bin/activate
          - ./tools/oio-travis-unit.sh
          - coverage combine .coverage.*.*
          - coverage xml -o .coverage.unit.xml
          - mv .coverage .coverage.unit
          - rm -f .coverage.*-vm*

      - name: Save coverage and test information
        script:
          - . $HOME/oiovenv/bin/activate
          - "worker upload {{.cds.workspace}}/.coverage.build* {{.cds.workspace}}/.coverage.unit*"
          - "[ ! -f pytests-*.xml ] || worker upload pytests-*.xml"

      - name: Build debug for Sonar
        script:
          - . $HOME/oio-env.sh
          - . $HOME/oiovenv/bin/activate
          - mkdir -p build_debug
          - cmake -DENABLE_CODECOVERAGE=on -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_BUILD_TYPE=Debug ${CMAKE_OPTS} -B build_debug
          - /opt/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir build_debug cmake --build build_debug
          - tar czvf {{.cds.workspace}}/oio-sds.build_sonar.tar.gz build_debug
          - worker upload {{.cds.workspace}}/oio-sds.build_sonar.tar.gz

    requirements:
      - model: Ubuntu-20.04-VM-b2-07
