FROM ubuntu:18.04
LABEL maintainer="jfsmig <jf.smigielski@gmail.com>"

# Install the definitions of the dependencies
# TODO(jfs): copy the go modules
COPY all-requirements.txt test-requirements.txt /etc/oio/deps/
COPY ci/submodules.txt /etc/oio/deps/
COPY ci/deps-ubuntu-bionic.txt /etc/oio/deps/system-deps.txt

# # Install custom sources and packages
# RUN set -x \
# && apt-get update -qq \
# && apt-get install -y -qq curl gnupg software-properties-common locales \
# && curl http://mirror.openio.io/pub/repo/openio/APT-GPG-KEY-OPENIO-0 | apt-key add - \
# && apt-add-repository "deb http://archive.ubuntu.com/ubuntu bionic-backports main restricted universe multiverse" \
# && apt-add-repository "deb http://mirror.openio.io/pub/repo/openio/sds/18.04/ubuntu/ bionic/" \

# # Install Golang the ugly way
# RUN set -x \
# && wget -q -O /tmp/go-amd64.tar.gz https://dl.google.com/go/go1.13.linux-amd64.tar.gz \
# && tar -C /usr/local -xzf /tmp/go-amd64.tar.gz \
# && rm /tmp/go-amd64.tar.gz \
# && ( cd /usr/local/go/ && rm -rf doc test *.* ) \
# && echo 'export PATH="/usr/local/go/bin:$PATH"' >> /etc/profile.d/golang.sh \
# && echo 'export GOROOT=/usr/local/go' >> /etc/profile.d/golang.sh \
# && echo 'export GOPATH=$HOME/go' >> /etc/profile.d/golang.sh \
# && echo '. /etc/profile.d/golang.sh' >> /etc/bash.bashrc \

RUN set -x \
# Install the system dependencies
&& apt-get update -y \
&& apt-get dist-upgrade -y \
&& apt-get install -y $(awk '!/^prod/ {print $2}' /etc/oio/deps/system-deps.txt) \
# Ensure a userland logger
&& sed -i '/^.*imklog.*$/d' /etc/rsyslog.conf \
# Install the Python dependencies
&& mkdir /tmp/venv \
&& virtualenv /tmp/venv \
&& . /tmp/venv/bin/activate \
&& pip install --upgrade pip setuptools virtualenv tox \
&& pip install --upgrade -r /etc/oio/deps/all-requirements.txt -r /etc/oio/deps/test-requirements.txt \
# Checkout, build & install the submodules
&& cd /tmp \
&& mkdir -p ${HOME}/.ssh \
&& ssh-keygen -q -t rsa -N '' -f ${HOME}/.ssh/id_rsa \
&& find $HOME/.ssh -ls \
&& echo -e "Host *\n\tStrictHostKeyChecking no\n" > ${HOME}/.ssh/config \
&& while read REPO BRANCH COMMIT TARGET ; do \
  git clone --jobs 4 $REPO ; \
  ( cd $(basename ${REPO%.git}) && git checkout $COMMIT ) \
done < /etc/oio/deps/submodules.txt \
# Dependency: GRIDINIT
&& cd /tmp \
&& ( cd gridinit && cmake \
	-D CMAKE_BUILD_TYPE=MinSizeRel \
	-D CMAKE_INSTALL_PREFIX=/usr/ \
	. \
	&& make ${MAKE_OPTS:-"-j4"} && make install ) && rm -rf gridinit \
# Dependency: ASN1C
&& cd /tmp \
&& ( cd asn1c \
	&& autoreconf -f -i \
	&& ./configure --prefix=/usr \
	&& make ${MAKE_OPTS:-"-j4"} && make install ) && rm -rf asn1c \
# Ensure the CI user account
&& useradd -s /bin/bash -l -U -G sudo,users -m ci \
&& chown -R ci:users /tmp/venv \
# Golang dependencies
&& su -l -c 'go get gopkg.in/ini.v1 gopkg.in/tylerb/graceful.v1 golang.org/x/sys/unix' ci \
# Finalize & clean the env
&& echo 'ci ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers.d/ci \
&& echo ". /tmp/venv/bin/activate" >> /etc/profile \
&& echo 'export PATH=/tmp/oio/bin:$PATH' >> /etc/profile \
&& echo 'export LD_LIBRARY_PATH=/tmp/oio/lib:$LD_LIBRARY_PATH' >> /etc/profile \
&& echo 'export ZK=127.0.0.1' >> /etc/profile \
&& echo 'export G_DEBUG=fatal_warnings' >> /etc/profile \
&& echo 'export G_DEBUG_LEVEL=W' >> /etc/profile \
# General cleanup of the working mess
&& apt-get autoremove --purge -y \
&& apt-get clean \
&& for i in $(find /var/log -type f -name '*.log') ; do > $i ;done

USER ci
WORKDIR /home/ci
CMD ["/bin/bash"]
